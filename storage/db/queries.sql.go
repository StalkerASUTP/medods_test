// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    refresh_token_hash,
    refresh_token_expires_at,
    user_agent,
    ip_address,
    is_active
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, refresh_token_hash, refresh_token_expires_at, user_agent, ip_address, is_active, created_at, updated_at
`

type CreateUserParams struct {
	ID                    uuid.UUID
	RefreshTokenHash      string
	RefreshTokenExpiresAt pgtype.Timestamp
	UserAgent             string
	IpAddress             string
	IsActive              bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.RefreshTokenHash,
		arg.RefreshTokenExpiresAt,
		arg.UserAgent,
		arg.IpAddress,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RefreshTokenHash,
		&i.RefreshTokenExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET is_active = FALSE
WHERE id = $1
`

func (q *Queries) DeactivateUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, refresh_token_hash, refresh_token_expires_at, user_agent, ip_address, is_active, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RefreshTokenHash,
		&i.RefreshTokenExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
UPDATE users
SET refresh_token_hash = $2,
    refresh_token_expires_at = $3
WHERE id = $1
RETURNING id, refresh_token_hash, refresh_token_expires_at, user_agent, ip_address, is_active, created_at, updated_at
`

type UpdateTokenParams struct {
	ID                    uuid.UUID
	RefreshTokenHash      string
	RefreshTokenExpiresAt pgtype.Timestamp
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (User, error) {
	row := q.db.QueryRow(ctx, updateToken, arg.ID, arg.RefreshTokenHash, arg.RefreshTokenExpiresAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.RefreshTokenHash,
		&i.RefreshTokenExpiresAt,
		&i.UserAgent,
		&i.IpAddress,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
